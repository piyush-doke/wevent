openapi: "3.0.0"
info:
  version: 1.0.0
  title: Wevent
  description: Wevent APIs

paths:
  /searchEvents:
    get:
      operationId: "searchEvents"
      parameters:
      - name: "neighborhood"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "start"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "category"
        in: "query"
        required: true
        schema:
          type: "string"
        
      responses:
        '200':
          description: "200 response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    $ref: '#/components/schemas/Events'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '500':
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '403':
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${SearchEventFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:

      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,neighborhood,start,category'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /getEventMetaData:
    get:
      operationId: "getEventMetaData"      
      responses:
        '200':
          description: "200 response"
          content:
            application/json:
              schema:
                type: "object"                
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '500':
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '403':
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${GetEventMetaData.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:

      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /getPlans:
    get:
      operationId: "getPlans"
      parameters:
      - name: "user_id"
        in: "query"
        required: true
        schema:
          type: "string"
        
      responses:
        '200':
          description: "200 response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    $ref: '#/components/schemas/Plans'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '500':
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '403':
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"

      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${SearchEventFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:

      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,user_id'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /createPlan:
    post:
      operationId: "createPlan"
      requestBody:
        description: A JSON object containing pet information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plan"
      responses:
        '200':
          description: "200 response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      plan_id:
                        type: "string"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '500':
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '403':
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
  
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${CreatePlanFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      
      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  
  /updatePlan:
    put:
      operationId: "updatePlan"
      requestBody:
        description: A JSON object containing pet information
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/VoteUpdate"
                - $ref: "#/components/schemas/AddFriendUpdate"
                - $ref: "#/components/schemas/ManualTriggerUpdate"
                - $ref: "#/components/schemas/AddEventUpdate"
      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '500':
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        '403':
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${UpdatePlanFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
    options:
      responses:
        '200':
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
    Plan:
      type: "object"
      required:
      - "name"
      - "start"
      - "trigger_option"
      - "host_id"
      properties:
        name:
          type: "string"
        start:
          type: "string"
        trigger_option:
          type: "string"
        host_id:
          type: "string"
    Plans:
      type: "object"
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PlanResponse'

    PlanResponse:
      type: "object"
      properties:
        plan_id:
          type: "string"
        votes:
          type: "array"
          items:
            $ref: '#/components/schemas/Vote'
        invitees:
          type: "array"
          items:
            type: "string"
        name:
          type: "string"
        trigger_option:
          type: "string"
        selected_event:
          type: "string"
    
    Vote:
      type: "object"
      properties:
        event:
          $ref: '#/components/schemas/EventInPlan'
        users:
          type: "array"
          items:
            type: "string"
    
    EventInPlan:
      type: "object"
      properties:
        event_id:
          type: "string"
        event_name:
          type: "string"
        description:
          type: "string"
        start:
          type: "string"
        end:
          type: "string"
        img_url:
          type: "string"
        full_address:
          type: "string"

    Events:
      type: "object"
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: "object"
      properties:
        event_id:
          type: "string"
        event_name:
          type: "string"
        description:
          type: "string"
        start:
          type: "string"
        end:
          type: "string"
        venue_id:
          type: "string"
        category:
          type: "string"
        summary:
          type: "string"
        img_url:
          type: "string"
        full_address:
          type: "string"
          
    VoteUpdate:
      type: "object"
      properties:
        update_type:
          type: "string"
        plan_id:
          type: "string"
        event_id:
          type: "string"
        user_id:
          type: "string"
      required:
      - event_id
      - user_id
      - plan_id
      
    AddFriendUpdate:
      type: "object"
      properties:
        update_type:
          type: "string"
        plan_id:
          type: "string"
        user_id:
          type: "string"
      required:
      - user_id
      - plan_id
        
    ManualTriggerUpdate:
      type: "object"
      properties:
        update_type:
          type: "string"
        plan_id:
          type: "string"
        selected_event_id:
          type: "string"
      required:
      - selected_event_id
      - plan_id
      
    AddEventUpdate:
      type: "object"
      properties:
        update_type:
          type: "string"
        plan_id:
          type: "string"
        event_id:
          type: "string"
      required:
      - event_id
      - plan_id